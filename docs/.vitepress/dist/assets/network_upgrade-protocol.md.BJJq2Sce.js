import{_ as t,c as o,a0 as a,o as l}from"./chunks/framework.BKwoqyCJ.js";const d=JSON.parse('{"title":"9. 基于 HTTP 的功能追加协议","description":"","frontmatter":{},"headers":[],"relativePath":"network/upgrade-protocol.md","filePath":"network/upgrade-protocol.md"}'),r={name:"network/upgrade-protocol.md"};function p(i,e,n,s,c,P){return l(),o("div",null,e[0]||(e[0]=[a('<h1 id="_9-基于-http-的功能追加协议" tabindex="-1">9. 基于 HTTP 的功能追加协议 <a class="header-anchor" href="#_9-基于-http-的功能追加协议" aria-label="Permalink to &quot;9. 基于 HTTP 的功能追加协议&quot;">​</a></h1><h2 id="_9-1-http-瓶颈-http-2-之前的版本" tabindex="-1">9.1 HTTP 瓶颈（HTTP 2 之前的版本） <a class="header-anchor" href="#_9-1-http-瓶颈-http-2-之前的版本" aria-label="Permalink to &quot;9.1 HTTP 瓶颈（HTTP 2 之前的版本）&quot;">​</a></h2><ul><li>一条连接上只可发送一个请求。</li><li>请求只能从客户端开始。客户端不可以接收除响应以外的指令。</li><li>请求 / 响应首部未经压缩就发送。首部信息越多延迟越大。</li><li>发送冗长的首部。每次互相发送相同的首部造成的浪费较多。</li><li>可任意选择数据压缩格式。非强制压缩发送。</li></ul><p><strong>Ajax 的解决方式：</strong></p><p>XMLHttpRequest API 发送请求，更新局部页面。由于只更新一部分页面，传输的数据量会减少，但是并未解决 HTTP 本身的问题。</p><p><strong>Comet 的解决方式：</strong></p><p>一旦服务器端有内容更新了，Comet 不会让请求等待，而是直接给客户端返回响应。这是一种通过延迟应答，模拟实现服务器端向客户端推送(Server Push)的功能。</p><p>内容上虽然实时更新了，但为了保留响应，一次连接的持续时间也变长了。为了维持连接还会消耗更多的资源。仍未解决 HTTP 协议本身存在的问题。</p><p><strong>SPDY 的目标</strong></p><p>协议级别消除 HTTP 瓶颈。</p><h2 id="_9-2-spdy" tabindex="-1">9.2 SPDY <a class="header-anchor" href="#_9-2-spdy" aria-label="Permalink to &quot;9.2 SPDY&quot;">​</a></h2><p>SPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。</p><p>增加了一下功能：</p><ul><li>多路复用</li><li>请求优先级</li><li>压缩首部</li><li>服务器推送</li></ul><p>HTTP/2 的关键功能主要来自 SPDY 技术，换言之，SPDY 的成果被采纳而最终演变为 HTTP/2。</p><h2 id="_9-3-websocket" tabindex="-1">9.3 WebSocket <a class="header-anchor" href="#_9-3-websocket" aria-label="Permalink to &quot;9.3 WebSocket&quot;">​</a></h2><p>利用 Ajax 和 Comet 技术进行通信可以提升 Web 的浏览速度。但问题 在于通信若使用 HTTP 协议，就无法彻底解决瓶颈问题。WebSocket 网络技术正是为解决这些问题而实现的一套新协议及 API。</p><p>WebSocket，即 Web 浏览器与 Web 服务器之间全双工通信标准。</p><p>由于是建立在 HTTP 基础上的协议，因此连接的发起方仍是客户端， 而一旦确立 WebSocket 通信连接，不论服务器还是客户端，任意一方都可直接向对方发送报文。</p><p>主要特点：</p><ul><li>推动功能：支持服务器向客户端推送数据。</li><li>减少通信量：连接建立后，一直保持连接状态。由于 WebSocket 首部信息很少，通信量也减少了。</li></ul><p>握手步骤：</p><ul><li>请求：为了实现 WebSocket 通信，需要用到 HTTP 的 Upgrade 首部字段，告知服务器通信协议发生改变。</li><li>响应：状态码 101 Switching Protocols 的响应。</li></ul>',23)]))}const h=t(r,[["render",p]]);export{d as __pageData,h as default};

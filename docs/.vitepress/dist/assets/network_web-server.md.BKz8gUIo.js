import{_ as e,c as r,a0 as t,o}from"./chunks/framework.BKwoqyCJ.js";const b=JSON.parse('{"title":"5. Web 服务器","description":"","frontmatter":{},"headers":[],"relativePath":"network/web-server.md","filePath":"network/web-server.md"}'),i={name:"network/web-server.md"};function h(n,a,l,d,p,s){return o(),r("div",null,a[0]||(a[0]=[t('<h1 id="_5-web-服务器" tabindex="-1">5. Web 服务器 <a class="header-anchor" href="#_5-web-服务器" aria-label="Permalink to &quot;5. Web 服务器&quot;">​</a></h1><h2 id="_5-1-用单台虚拟主机实现多个域名" tabindex="-1">5.1 用单台虚拟主机实现多个域名 <a class="header-anchor" href="#_5-1-用单台虚拟主机实现多个域名" aria-label="Permalink to &quot;5.1 用单台虚拟主机实现多个域名&quot;">​</a></h2><p>HTTP/1.1 规范允许一台 HTTP 服务器搭建多个 Web 站点。</p><p>即使物理层面只有一台服务器，也可以通过虚拟主机技术，在一台服务器上搭建多个 Web 站点。这多个域名指向同一个 ip 地址。</p><h2 id="_5-2-通信转发-代理、网关、隧道" tabindex="-1">5.2 通信转发：代理、网关、隧道 <a class="header-anchor" href="#_5-2-通信转发-代理、网关、隧道" aria-label="Permalink to &quot;5.2 通信转发：代理、网关、隧道&quot;">​</a></h2><h3 id="_5-1-1-代理" tabindex="-1">5.1.1 代理 <a class="header-anchor" href="#_5-1-1-代理" aria-label="Permalink to &quot;5.1.1 代理&quot;">​</a></h3><p>代理是一种转发功能的应用程序，扮演服务器和客户端的中间人角色。接收客户端的请求，转发给服务器，并接收服务器的响应，返回给客户端。</p><p>在 HTTP 通信过程中，可级联多台服务器。转发是需要附加 Via 首部字段以标识出经过的主机信息。</p><p>使用代理服务器的理由有：利用缓存技术减少网络带宽的流量和加载时间；隐藏真实 IP 地址，增强安全性；提供负载均衡、安全防护等。</p><p>缓存代理：缓存代理将资源副本保存在代理服务器上，客户端的请求会先到缓存代理，再由缓存代理转发给源服务器。</p><p>透明代理：转发请求或响应时，不对报文做任何加工处理。</p><h3 id="_5-1-2-网关" tabindex="-1">5.1.2 网关 <a class="header-anchor" href="#_5-1-2-网关" aria-label="Permalink to &quot;5.1.2 网关&quot;">​</a></h3><p>网关与代理类似，而网关能使通信线路上的服务器提供非 HTTP 协议服务。</p><p>利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信路上加密以确保连接的安全。</p><h3 id="_5-1-3-隧道" tabindex="-1">5.1.3 隧道 <a class="header-anchor" href="#_5-1-3-隧道" aria-label="Permalink to &quot;5.1.3 隧道&quot;">​</a></h3><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等安全协议进行加密处理。隧道的目的是确保客户端能与服务器进行安全的通信。隧道会将请求保持原样中转给服务器。</p><h2 id="_5-3-保存资源的缓存" tabindex="-1">5.3 保存资源的缓存 <a class="header-anchor" href="#_5-3-保存资源的缓存" aria-label="Permalink to &quot;5.3 保存资源的缓存&quot;">​</a></h2><p>缓存可以减少网络带宽的流量，提升加载速度。避免多次从源服务器获取资源。</p><h3 id="_5-3-1-缓存的有效期" tabindex="-1">5.3.1 缓存的有效期 <a class="header-anchor" href="#_5-3-1-缓存的有效期" aria-label="Permalink to &quot;5.3.1 缓存的有效期&quot;">​</a></h3><p>即使存在缓存，也会因为客户端的要求、缓存的有效期等因素，向源服务器确认资源的有效性。</p><h3 id="_5-3-2-客户端的缓存" tabindex="-1">5.3.2 客户端的缓存 <a class="header-anchor" href="#_5-3-2-客户端的缓存" aria-label="Permalink to &quot;5.3.2 客户端的缓存&quot;">​</a></h3><p>缓存不仅可以存在代理服务器上，还可以存在于客户端。浏览器缓存如果有效，可以直接从本地磁盘内读取。</p>',22)]))}const _=e(i,[["render",h]]);export{b as __pageData,_ as default};

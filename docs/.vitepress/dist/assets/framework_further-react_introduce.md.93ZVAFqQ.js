import{_ as e,c as t,a0 as o,o as l}from"./chunks/framework.BKwoqyCJ.js";const u=JSON.parse('{"title":"初入 React 世界","description":"","frontmatter":{},"headers":[],"relativePath":"framework/further-react/introduce.md","filePath":"framework/further-react/introduce.md"}'),r={name:"framework/further-react/introduce.md"};function i(c,a,n,p,d,s){return l(),t("div",null,a[0]||(a[0]=[o('<h1 id="初入-react-世界" tabindex="-1">初入 React 世界 <a class="header-anchor" href="#初入-react-世界" aria-label="Permalink to &quot;初入 React 世界&quot;">​</a></h1><h2 id="_1-1-react-简介" tabindex="-1">1.1 React 简介 <a class="header-anchor" href="#_1-1-react-简介" aria-label="Permalink to &quot;1.1 React 简介&quot;">​</a></h2><p>React 是 Facebook 推出的一个用于构建用户界面的 JavaScript 库。</p><p>React 把用户界面抽象成组件，通过 JSX 语法来复用组件。可以用来开发 Web 网页，还能用于开发原生移动应用。</p><h3 id="_1-1-1-专注视觉层" tabindex="-1">1.1.1 专注视觉层 <a class="header-anchor" href="#_1-1-1-专注视觉层" aria-label="Permalink to &quot;1.1.1 专注视觉层&quot;">​</a></h3><p>React 并不是完整的 MVC/MVVM 框架，它只专注于提供清晰、简介的 View 层解决方案。</p><h3 id="_1-1-2-vdom" tabindex="-1">1.1.2 VDOM <a class="header-anchor" href="#_1-1-2-vdom" aria-label="Permalink to &quot;1.1.2 VDOM&quot;">​</a></h3><p>React 把真实 DOM 树转换成 JavaScript 对象树（VDOM），每次数据更新，重新计算 VDOM，然后通过 diff 算法找出差异，再更新到真实 DOM。</p><p>VDOM 提升了性能，但最大的好处是方便与其他平台集成。</p><h3 id="_1-1-3-函数式编程" tabindex="-1">1.1.3 函数式编程 <a class="header-anchor" href="#_1-1-3-函数式编程" aria-label="Permalink to &quot;1.1.3 函数式编程&quot;">​</a></h3><p>React 充分利用函数式方法去减少冗余代码。此外，由于它本身就是简单函数，所以易于测试。</p><h2 id="_1-2-jsx-语法" tabindex="-1">1.2 JSX 语法 <a class="header-anchor" href="#_1-2-jsx-语法" aria-label="Permalink to &quot;1.2 JSX 语法&quot;">​</a></h2><p>JSX 将 HTML 语法直接加入到 JavaScript 代码中，再通过翻译器转换到纯 JavaScript 后由浏览器执行。在实际开发中，JSX 在产品打包阶段都已经编译成纯 JavaScript，不会带来任何副作用，反而会让代码更加直观并易于维护。</p><p><strong>JSX 语法规则：</strong></p><ol><li>XML 基本语法</li></ol><ul><li>定义标签时，只允许被一个标签包裹</li><li>标签必须闭合</li></ul><ol start="2"><li>元素类型</li></ol><ul><li>标签首字母小写对应 DOM 元素，大写首字母对应组件元素</li><li>使用注释要用 {}</li></ul><ol start="3"><li>元素属性</li></ol><ul><li>class 属性改为 className</li><li>for 属性改为 htmlFor</li><li>省略 Boolean 属性默认值为 true，<code>&lt;Checkbox checked={true} /&gt;</code> 可以简写为 <code>&lt;Checkbox checked /&gt;</code></li><li>可以使用 ES6 rest/spread 语法</li><li>DOM 元素自定义属性必须使用 data- 开头，如 <code>data-custom=&quot;value&quot;</code>，而自定义标签的任何属性都支持。</li></ul><ol start="4"><li>JS 表达式</li></ol><p>属性值要使用表达式，只要用 {} 替换 &quot;&quot;</p><ol start="5"><li>HTML 转义 如果 JSX 中含有转义后的 4 实体字符，比如 ©(©)，则最后 DOM 中不会正确显示，解决方式：</li></ol><ul><li>直接使用 UTF-8 字符 ©;</li><li>使用对应字符的 Unicode 编码查询编码;</li><li>使用数组组装 <code>&lt;div&gt;{[&#39;cc &#39;, &lt;span&gt;&amp;copy;&lt;/span&gt;, &#39; 2015&#39;]}&lt;/div&gt;;</code></li><li>直接插入原始的 HTML。React 提供了 dangerouslySetInnerHTML 属性</li></ul><h2 id="_1-3-react-组件" tabindex="-1">1.3 React 组件 <a class="header-anchor" href="#_1-3-react-组件" aria-label="Permalink to &quot;1.3 React 组件&quot;">​</a></h2><p>React 组件基本上由 3 个部分组成——属性(props)、状态(state)以及生命周期方法。</p><p>构建方式：</p><ul><li>React.createClass</li><li>extends React.Component</li><li>函数式组件</li></ul><blockquote><p>无状态组件</p><p>无状态组件只传入 props 和 context，不存在 state，也没有生命周，只负责渲染。</p></blockquote><h2 id="_1-4-react-数据流" tabindex="-1">1.4 React 数据流 <a class="header-anchor" href="#_1-4-react-数据流" aria-label="Permalink to &quot;1.4 React 数据流&quot;">​</a></h2><p>React 中，数据是自顶向下单向流动的。</p><h3 id="_1-4-1-state" tabindex="-1">1.4.1 state <a class="header-anchor" href="#_1-4-1-state" aria-label="Permalink to &quot;1.4.1 state&quot;">​</a></h3><p>state 管理足迹爱你内部状态。通过 setState 改变 state，触发重新渲染。</p><h3 id="_1-4-2-props" tabindex="-1">1.4.2 props <a class="header-anchor" href="#_1-4-2-props" aria-label="Permalink to &quot;1.4.2 props&quot;">​</a></h3><p>props 是组件的配置，是父组件传递给子组件的数据，其本身是不可变的。</p><h2 id="_1-5-react-生命周期" tabindex="-1">1.5 React 生命周期 <a class="header-anchor" href="#_1-5-react-生命周期" aria-label="Permalink to &quot;1.5 React 生命周期&quot;">​</a></h2><h3 id="_1-5-1-挂载或者卸载" tabindex="-1">1.5.1 挂载或者卸载 <a class="header-anchor" href="#_1-5-1-挂载或者卸载" aria-label="Permalink to &quot;1.5.1 挂载或者卸载&quot;">​</a></h3><p>componentWillMount 方法会在 render 方法之前执行，而 componentDidMount 方法会在 render 方法之后执行，分别代表了渲染前后的时刻。</p><p>组件卸载时，会执行 componentWillUnmount 方法。</p><h3 id="_1-5-2-更新" tabindex="-1">1.5.2 更新 <a class="header-anchor" href="#_1-5-2-更新" aria-label="Permalink to &quot;1.5.2 更新&quot;">​</a></h3><p>如果组件自身的 state 更新了，那么会依次执行 shouldComponentUpdate、componentWillUpdate 、 render 和 componentDidUpdate。</p><p>shouldComponentUpdate 是一个特别的方法，它接收需要更新的 props 和 state，让开发者增加 必要的条件判断，让其在需要时更新，不需要时不更新。因此，当方法返回 false 的时候，组件 不再向下执行生命周期方法。</p>',42)]))}const m=e(r,[["render",i]]);export{u as __pageData,m as default};
